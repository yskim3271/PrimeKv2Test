nohup: ignoring input
####################################
메모: PrimeK-Net 재현성 테스트
####################################

Initializing Training Process..
Batch size per GPU : 2
LKFCA_Net(
  (dense_encoder): DenseEncoder(
    (dense_conv_1): Sequential(
      (0): Conv2d(2, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (dense_block): DS_DDB(
      (dense_block): ModuleList(
        (0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 1), dilation=(2, 1), groups=128)
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (2): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 1), dilation=(4, 1), groups=192)
          (1): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (3): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(8, 1), dilation=(8, 1), groups=256)
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
      )
    )
    (dense_conv_2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(1, 3), stride=(1, 2))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
  )
  (LKFCAnet): ModuleList(
    (0-3): 4 x TS_BLOCK(
      (time): GPFCA(
        (naf_blocks): ModuleList(
          (0-1): 2 x LKFCA_Block(
            (conv1): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
            (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), groups=128)
            (conv3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (sca): Sequential(
              (0): AdaptiveAvgPool1d(output_size=1)
              (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (sg): SimpleGate()
            (norm1): LayerNorm1d()
            (norm2): LayerNorm1d()
            (dropout1): Identity()
            (GCGFN): GCGFN(
              (norm): LayerNorm1d()
              (LKA9): Sequential(
                (0): Conv1d(64, 64, kernel_size=(31,), stride=(1,), padding=(15,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA7): Sequential(
                (0): Conv1d(64, 64, kernel_size=(23,), stride=(1,), padding=(11,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA5): Sequential(
                (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA3): Sequential(
                (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (X3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), groups=64)
              (X5): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,), groups=64)
              (X7): Conv1d(64, 64, kernel_size=(23,), stride=(1,), padding=(11,), groups=64)
              (X9): Conv1d(64, 64, kernel_size=(31,), stride=(1,), padding=(15,), groups=64)
              (proj_first): Sequential(
                (0): Conv1d(64, 256, kernel_size=(1,), stride=(1,))
              )
              (proj_last): Sequential(
                (0): Conv1d(256, 64, kernel_size=(1,), stride=(1,))
              )
            )
          )
        )
        (Rearrange1): Rearrange('b n c -> b c n')
        (Rearrange2): Rearrange('b c n -> b n c')
      )
      (freq): GPFCA(
        (naf_blocks): ModuleList(
          (0-1): 2 x LKFCA_Block(
            (conv1): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
            (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), groups=128)
            (conv3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (sca): Sequential(
              (0): AdaptiveAvgPool1d(output_size=1)
              (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (sg): SimpleGate()
            (norm1): LayerNorm1d()
            (norm2): LayerNorm1d()
            (dropout1): Identity()
            (GCGFN): GCGFN(
              (norm): LayerNorm1d()
              (LKA9): Sequential(
                (0): Conv1d(64, 64, kernel_size=(31,), stride=(1,), padding=(15,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA7): Sequential(
                (0): Conv1d(64, 64, kernel_size=(23,), stride=(1,), padding=(11,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA5): Sequential(
                (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (LKA3): Sequential(
                (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), groups=64)
                (1): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              )
              (X3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), groups=64)
              (X5): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,), groups=64)
              (X7): Conv1d(64, 64, kernel_size=(23,), stride=(1,), padding=(11,), groups=64)
              (X9): Conv1d(64, 64, kernel_size=(31,), stride=(1,), padding=(15,), groups=64)
              (proj_first): Sequential(
                (0): Conv1d(64, 256, kernel_size=(1,), stride=(1,))
              )
              (proj_last): Sequential(
                (0): Conv1d(256, 64, kernel_size=(1,), stride=(1,))
              )
            )
          )
        )
        (Rearrange1): Rearrange('b n c -> b c n')
        (Rearrange2): Rearrange('b c n -> b n c')
      )
    )
  )
  (mask_decoder): MaskDecoder(
    (dense_block): DS_DDB(
      (dense_block): ModuleList(
        (0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 1), dilation=(2, 1), groups=128)
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (2): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 1), dilation=(4, 1), groups=192)
          (1): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (3): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(8, 1), dilation=(8, 1), groups=256)
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
      )
    )
    (mask_conv): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(1, 3), stride=(1, 2))
      (1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
      (2): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (3): PReLU(num_parameters=1)
      (4): Conv2d(1, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (lsigmoid): LearnableSigmoid_2d()
  )
  (phase_decoder): PhaseDecoder(
    (dense_block): DS_DDB(
      (dense_block): ModuleList(
        (0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 1), dilation=(2, 1), groups=128)
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (2): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 1), dilation=(4, 1), groups=192)
          (1): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
        (3): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(8, 1), dilation=(8, 1), groups=256)
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (3): PReLU(num_parameters=64)
        )
      )
    )
    (phase_conv): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(1, 3), stride=(1, 2))
      (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): PReLU(num_parameters=64)
    )
    (phase_conv_r): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
    (phase_conv_i): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
)
Generator Parameters :  1410641
checkpoints directory :  64-4-CONMETRIC-VBDEMAND
Epoch: 1
Steps : 0, Gen Loss: 1.749, Disc Loss: 0.699, Metric loss: 0.182, Magnitude Loss : 0.110, Phase Loss : 4.676, Complex Loss : 0.989, Con_Complex Loss : 0.404, Time Loss : 0.609, s/b : 4.055
Steps : 5, Gen Loss: 1.688, Disc Loss: 0.857, Metric loss: 0.604, Magnitude Loss : 0.172, Phase Loss : 4.219, Complex Loss : 1.054, Con_Complex Loss : 0.264, Time Loss : 0.560, s/b : 1.170
Steps : 10, Gen Loss: 1.528, Disc Loss: 0.145, Metric loss: 0.360, Magnitude Loss : 0.120, Phase Loss : 4.049, Complex Loss : 0.850, Con_Complex Loss : 0.173, Time Loss : 0.582, s/b : 0.395
Steps : 15, Gen Loss: 1.641, Disc Loss: 0.015, Metric loss: 0.493, Magnitude Loss : 0.218, Phase Loss : 4.027, Complex Loss : 0.976, Con_Complex Loss : 0.169, Time Loss : 0.815, s/b : 0.423
Steps : 20, Gen Loss: 1.528, Disc Loss: 0.075, Metric loss: 0.718, Magnitude Loss : 0.119, Phase Loss : 3.945, Complex Loss : 0.920, Con_Complex Loss : 0.181, Time Loss : 0.611, s/b : 0.402
Steps : 25, Gen Loss: 1.457, Disc Loss: 0.067, Metric loss: 0.962, Magnitude Loss : 0.085, Phase Loss : 3.871, Complex Loss : 0.740, Con_Complex Loss : 0.224, Time Loss : 0.589, s/b : 0.378
Steps : 30, Gen Loss: 1.476, Disc Loss: 0.003, Metric loss: 0.901, Magnitude Loss : 0.153, Phase Loss : 3.889, Complex Loss : 0.549, Con_Complex Loss : 0.167, Time Loss : 0.324, s/b : 0.375
Steps : 35, Gen Loss: 1.228, Disc Loss: 0.141, Metric loss: 0.311, Magnitude Loss : 0.056, Phase Loss : 3.555, Complex Loss : 0.399, Con_Complex Loss : 0.154, Time Loss : 0.346, s/b : 0.380
Steps : 40, Gen Loss: 1.072, Disc Loss: 0.061, Metric loss: 0.679, Magnitude Loss : 0.061, Phase Loss : 3.010, Complex Loss : 0.336, Con_Complex Loss : 0.129, Time Loss : 0.366, s/b : 0.399
Steps : 45, Gen Loss: 1.377, Disc Loss: 0.024, Metric loss: 0.539, Magnitude Loss : 0.222, Phase Loss : 3.460, Complex Loss : 0.490, Con_Complex Loss : 0.137, Time Loss : 0.361, s/b : 0.379
Steps : 50, Gen Loss: 1.147, Disc Loss: 0.193, Metric loss: 0.548, Magnitude Loss : 0.178, Phase Loss : 2.847, Complex Loss : 0.466, Con_Complex Loss : 0.115, Time Loss : 0.381, s/b : 0.378
Steps : 55, Gen Loss: 1.161, Disc Loss: 0.028, Metric loss: 0.557, Magnitude Loss : 0.105, Phase Loss : 3.207, Complex Loss : 0.339, Con_Complex Loss : 0.090, Time Loss : 0.273, s/b : 0.384
Steps : 60, Gen Loss: 1.364, Disc Loss: 0.013, Metric loss: 0.963, Magnitude Loss : 0.217, Phase Loss : 3.370, Complex Loss : 0.502, Con_Complex Loss : 0.090, Time Loss : 0.329, s/b : 0.377
Steps : 65, Gen Loss: 1.102, Disc Loss: 0.054, Metric loss: 0.911, Magnitude Loss : 0.080, Phase Loss : 3.046, Complex Loss : 0.315, Con_Complex Loss : 0.077, Time Loss : 0.369, s/b : 0.378
Steps : 70, Gen Loss: 1.216, Disc Loss: 0.004, Metric loss: 0.785, Magnitude Loss : 0.156, Phase Loss : 3.165, Complex Loss : 0.400, Con_Complex Loss : 0.065, Time Loss : 0.394, s/b : 0.383
Steps : 75, Gen Loss: 1.149, Disc Loss: 0.003, Metric loss: 0.767, Magnitude Loss : 0.100, Phase Loss : 3.144, Complex Loss : 0.351, Con_Complex Loss : 0.071, Time Loss : 0.300, s/b : 0.380
Steps : 80, Gen Loss: 0.811, Disc Loss: 0.037, Metric loss: 0.512, Magnitude Loss : 0.058, Phase Loss : 2.263, Complex Loss : 0.239, Con_Complex Loss : 0.062, Time Loss : 0.273, s/b : 0.380
Steps : 85, Gen Loss: 1.218, Disc Loss: 0.010, Metric loss: 0.814, Magnitude Loss : 0.167, Phase Loss : 3.156, Complex Loss : 0.374, Con_Complex Loss : 0.061, Time Loss : 0.296, s/b : 0.378
Steps : 90, Gen Loss: 0.949, Disc Loss: 0.030, Metric loss: 0.545, Magnitude Loss : 0.069, Phase Loss : 2.672, Complex Loss : 0.260, Con_Complex Loss : 0.051, Time Loss : 0.289, s/b : 0.380
Steps : 95, Gen Loss: 1.377, Disc Loss: 0.003, Metric loss: 0.817, Magnitude Loss : 0.208, Phase Loss : 3.470, Complex Loss : 0.514, Con_Complex Loss : 0.051, Time Loss : 0.300, s/b : 0.397
Steps : 100, Gen Loss: 1.217, Disc Loss: 0.095, Metric loss: 0.979, Magnitude Loss : 0.148, Phase Loss : 3.170, Complex Loss : 0.400, Con_Complex Loss : 0.046, Time Loss : 0.310, s/b : 0.391
Steps : 105, Gen Loss: 1.387, Disc Loss: 0.023, Metric loss: 0.620, Magnitude Loss : 0.229, Phase Loss : 3.490, Complex Loss : 0.495, Con_Complex Loss : 0.043, Time Loss : 0.330, s/b : 0.391
Steps : 110, Gen Loss: 1.117, Disc Loss: 0.023, Metric loss: 0.635, Magnitude Loss : 0.114, Phase Loss : 3.017, Complex Loss : 0.367, Con_Complex Loss : 0.043, Time Loss : 0.339, s/b : 0.379
Steps : 115, Gen Loss: 0.967, Disc Loss: 0.120, Metric loss: 0.470, Magnitude Loss : 0.069, Phase Loss : 2.750, Complex Loss : 0.262, Con_Complex Loss : 0.039, Time Loss : 0.275, s/b : 0.376
Steps : 120, Gen Loss: 1.225, Disc Loss: 0.118, Metric loss: 0.827, Magnitude Loss : 0.186, Phase Loss : 3.080, Complex Loss : 0.443, Con_Complex Loss : 0.038, Time Loss : 0.248, s/b : 0.400
Steps : 125, Gen Loss: 1.132, Disc Loss: 0.009, Metric loss: 0.845, Magnitude Loss : 0.101, Phase Loss : 3.088, Complex Loss : 0.347, Con_Complex Loss : 0.032, Time Loss : 0.247, s/b : 0.383
Steps : 130, Gen Loss: 0.979, Disc Loss: 0.051, Metric loss: 0.875, Magnitude Loss : 0.076, Phase Loss : 2.711, Complex Loss : 0.250, Con_Complex Loss : 0.036, Time Loss : 0.270, s/b : 0.401
Steps : 135, Gen Loss: 1.045, Disc Loss: 0.012, Metric loss: 0.680, Magnitude Loss : 0.090, Phase Loss : 2.902, Complex Loss : 0.284, Con_Complex Loss : 0.028, Time Loss : 0.295, s/b : 0.384
Steps : 140, Gen Loss: 1.231, Disc Loss: 0.008, Metric loss: 0.597, Magnitude Loss : 0.169, Phase Loss : 3.197, Complex Loss : 0.431, Con_Complex Loss : 0.031, Time Loss : 0.323, s/b : 0.381
Steps : 145, Gen Loss: 1.271, Disc Loss: 0.020, Metric loss: 0.851, Magnitude Loss : 0.248, Phase Loss : 3.037, Complex Loss : 0.454, Con_Complex Loss : 0.029, Time Loss : 0.309, s/b : 0.385
Steps : 150, Gen Loss: 1.127, Disc Loss: 0.004, Metric loss: 0.754, Magnitude Loss : 0.119, Phase Loss : 3.031, Complex Loss : 0.354, Con_Complex Loss : 0.027, Time Loss : 0.285, s/b : 0.386
Steps : 155, Gen Loss: 1.494, Disc Loss: 0.012, Metric loss: 0.693, Magnitude Loss : 0.251, Phase Loss : 3.690, Complex Loss : 0.619, Con_Complex Loss : 0.026, Time Loss : 0.335, s/b : 0.399
Steps : 160, Gen Loss: 1.266, Disc Loss: 0.133, Metric loss: 0.841, Magnitude Loss : 0.134, Phase Loss : 3.430, Complex Loss : 0.357, Con_Complex Loss : 0.024, Time Loss : 0.303, s/b : 0.383
Steps : 165, Gen Loss: 1.314, Disc Loss: 0.002, Metric loss: 0.889, Magnitude Loss : 0.176, Phase Loss : 3.393, Complex Loss : 0.455, Con_Complex Loss : 0.027, Time Loss : 0.282, s/b : 0.386
Steps : 170, Gen Loss: 1.063, Disc Loss: 0.067, Metric loss: 0.485, Magnitude Loss : 0.131, Phase Loss : 2.869, Complex Loss : 0.292, Con_Complex Loss : 0.020, Time Loss : 0.225, s/b : 0.382
Steps : 175, Gen Loss: 0.933, Disc Loss: 0.129, Metric loss: 0.843, Magnitude Loss : 0.088, Phase Loss : 2.525, Complex Loss : 0.256, Con_Complex Loss : 0.026, Time Loss : 0.269, s/b : 0.383
Steps : 180, Gen Loss: 1.198, Disc Loss: 0.012, Metric loss: 0.648, Magnitude Loss : 0.203, Phase Loss : 2.945, Complex Loss : 0.484, Con_Complex Loss : 0.029, Time Loss : 0.298, s/b : 0.381
Steps : 185, Gen Loss: 1.308, Disc Loss: 0.021, Metric loss: 0.446, Magnitude Loss : 0.161, Phase Loss : 3.462, Complex Loss : 0.498, Con_Complex Loss : 0.024, Time Loss : 0.300, s/b : 0.379
Steps : 190, Gen Loss: 1.291, Disc Loss: 0.018, Metric loss: 0.629, Magnitude Loss : 0.174, Phase Loss : 3.364, Complex Loss : 0.461, Con_Complex Loss : 0.021, Time Loss : 0.248, s/b : 0.377
Steps : 195, Gen Loss: 0.662, Disc Loss: 0.020, Metric loss: 0.395, Magnitude Loss : 0.056, Phase Loss : 1.885, Complex Loss : 0.126, Con_Complex Loss : 0.013, Time Loss : 0.202, s/b : 0.391
Steps : 200, Gen Loss: 0.936, Disc Loss: 0.061, Metric loss: 0.458, Magnitude Loss : 0.084, Phase Loss : 2.558, Complex Loss : 0.340, Con_Complex Loss : 0.019, Time Loss : 0.264, s/b : 0.380
Steps : 205, Gen Loss: 0.988, Disc Loss: 0.027, Metric loss: 0.703, Magnitude Loss : 0.090, Phase Loss : 2.729, Complex Loss : 0.259, Con_Complex Loss : 0.014, Time Loss : 0.382, s/b : 0.382
Steps : 210, Gen Loss: 1.291, Disc Loss: 0.001, Metric loss: 0.663, Magnitude Loss : 0.173, Phase Loss : 3.363, Complex Loss : 0.455, Con_Complex Loss : 0.018, Time Loss : 0.297, s/b : 0.381
